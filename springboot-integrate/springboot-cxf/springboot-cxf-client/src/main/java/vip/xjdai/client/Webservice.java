package vip.xjdai.client;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.17
 * 2019-09-10T15:27:38.240+08:00
 * Generated source version: 3.1.17
 * 
 */
@WebServiceClient(name = "Webservice", 
                  wsdlLocation = "http://221.229.247.188:8203/webservice.asmx?WSDL",
                  targetNamespace = "http://tempuri.org/") 
public class Webservice extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "Webservice");
    public final static QName WebserviceHttpPost = new QName("http://tempuri.org/", "WebserviceHttpPost");
    public final static QName WebserviceSoap12 = new QName("http://tempuri.org/", "WebserviceSoap12");
    public final static QName WebserviceSoap = new QName("http://tempuri.org/", "WebserviceSoap");
    public final static QName WebserviceHttpGet = new QName("http://tempuri.org/", "WebserviceHttpGet");
    static {
        URL url = null;
        try {
            url = new URL("http://221.229.247.188:8203/webservice.asmx?WSDL");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Webservice.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://221.229.247.188:8203/webservice.asmx?WSDL");
        }
        WSDL_LOCATION = url;
    }

    public Webservice(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Webservice(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Webservice() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public Webservice(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public Webservice(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public Webservice(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns WebserviceHttpPost
     */
    @WebEndpoint(name = "WebserviceHttpPost")
    public WebserviceHttpPost getWebserviceHttpPost() {
        return super.getPort(WebserviceHttpPost, WebserviceHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WebserviceHttpPost
     */
    @WebEndpoint(name = "WebserviceHttpPost")
    public WebserviceHttpPost getWebserviceHttpPost(WebServiceFeature... features) {
        return super.getPort(WebserviceHttpPost, WebserviceHttpPost.class, features);
    }


    /**
     *
     * @return
     *     returns WebserviceSoap
     */
    @WebEndpoint(name = "WebserviceSoap12")
    public WebserviceSoap getWebserviceSoap12() {
        return super.getPort(WebserviceSoap12, WebserviceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WebserviceSoap
     */
    @WebEndpoint(name = "WebserviceSoap12")
    public WebserviceSoap getWebserviceSoap12(WebServiceFeature... features) {
        return super.getPort(WebserviceSoap12, WebserviceSoap.class, features);
    }


    /**
     *
     * @return
     *     returns WebserviceSoap
     */
    @WebEndpoint(name = "WebserviceSoap")
    public WebserviceSoap getWebserviceSoap() {
        return super.getPort(WebserviceSoap, WebserviceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WebserviceSoap
     */
    @WebEndpoint(name = "WebserviceSoap")
    public WebserviceSoap getWebserviceSoap(WebServiceFeature... features) {
        return super.getPort(WebserviceSoap, WebserviceSoap.class, features);
    }


    /**
     *
     * @return
     *     returns WebserviceHttpGet
     */
    @WebEndpoint(name = "WebserviceHttpGet")
    public WebserviceHttpGet getWebserviceHttpGet() {
        return super.getPort(WebserviceHttpGet, WebserviceHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WebserviceHttpGet
     */
    @WebEndpoint(name = "WebserviceHttpGet")
    public WebserviceHttpGet getWebserviceHttpGet(WebServiceFeature... features) {
        return super.getPort(WebserviceHttpGet, WebserviceHttpGet.class, features);
    }

}
