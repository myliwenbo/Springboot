<?xml version="1.0" encoding="UTF-8"?>
<!--scan ：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。-->
<!--debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" debug="true">

    <!-- 文件编码 -->
    <property name="CODING" value="UTF-8"/>
    <!-- 定义日志文件的存储地址，相对路径，相对于项目目录下-->
    <property name="LOG_ROOT" value="log"/>
    <!-- 日志文件路径+日期 -->
    <property name="LOG_DIR" value="${LOG_ROOT}/customer_%d{yyyy-MM-dd}"/>
    <!-- 格式化-->
    <property name="LOG_FORMAT" value="%d{yyyy年MM月dd日 HH小时mm分钟ss秒} [%15t] [%5p] %70c | %m%n "/>

    <!-- 控制台输出 -->
    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_FORMAT}</pattern>
            <charset>${CODING}</charset>
        </encoder>
    </appender>
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。-->
    <appender name="fixedFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 当前记录的文件和名称-->
        <file>log/fixedFile.log</file>
        <!-- 根据固定窗口模式生成日志文件，结合triggeringPolicy（当日志文件达到5MB时触发滚动，生成新的日志文件） -->
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <!-- 当生成了3个归档文件后，若继续生成，将覆盖最早的日志 -->
            <fileNamePattern>log/fixedFile%i.log.zip</fileNamePattern>
            <minIndex>1</minIndex>
            <!-- 文件数量最大值，超过则从1开始进行覆盖 -->
            <maxIndex>12</maxIndex>
        </rollingPolicy>
        <!-- 触发策略，超过10kb则进行滚动 -->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>10kb</maxFileSize>
        </triggeringPolicy>
        <encoder>
            <pattern>${LOG_FORMAT}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 级别依次为【从高到低】： ERROR > WARN > INFO > DEBUG > TRACE -->
    <!--
        level="输出级别" 配置输出的级别，
        如果<appender>也配置了级别，那么就按照谁的级别高就输出谁的，
        比如：appender配了ERROR 那么root配INFO，那么会按照 appender的输出级别
        比如：root配了ERROR，appender配了INFO，那么会按照 root的输出级别
    -->
    <root level="INFO">
        <appender-ref ref="fixedFile"/>
        <appender-ref ref="consoleAppender"/>
    </root>
</configuration>