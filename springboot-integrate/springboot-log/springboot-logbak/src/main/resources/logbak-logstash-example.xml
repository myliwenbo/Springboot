<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="false">
    <!-- 文件大小 -->
    <property name="CODING" value="UTF-8"/>
    <!--定义日志文件的存储地址，相对路径，相对于项目目录下. -->
    <property name="LOG_SIZI" value="100kb"/>
    <property name="LOG_PATH" value="home/logs/customer"/>
    <!-- 日志文件路径+日期 -->
    <property name="LOG_FORMAT" value="%d{yyyy年MM月dd日 HH小时mm分钟ss秒} [%15t] [%5p] %40.40c | %m%n "/>
    <!-- 控制台输出 -->
    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_FORMAT}</pattern>
            <charset>${CODING}</charset>
        </encoder>
    </appender>

    <!--滚动输出到文件，达到一定条件时，会将日志记录到其他文件
        1. 根据时间进行滚动日志，按照每天滚动，前提是不超过文件的临界值
        2. 如果超出了文件的临界值会立即滚动，
    -->
    <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <File>log/error.log</File>
        <!-- 滚动策略：当时间过了24时or日志大于临界值的时候，会自动重新开辟一个日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--归档的日志文件的路径
                %d{yyyy-MM-dd} 代表了当前日期
                %i              代表了索引
                .log.zip        代表了归档个成一个zip文件
           -->
            <fileNamePattern>log/error归档/error%d{yyyy-MM-dd}-%i.log.zip</fileNamePattern>
            <!-- 触发策略 ：日志文件的临界值，超过该临界值后对当前日志进行分割 创建一个新的文件 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${LOG_SIZI}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 保留归档文件的最长天数，超过30天将被删除 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <!--日志的文件格式化 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_FORMAT}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- DENY：日志将立即被抛弃，不再经过其他过滤器，本appender也不进行处理 -->
        <!-- ACCEPT：日志被立即处理，不再经过其他过滤器 -->
        <!-- onMatch、onMismatch里内容要大写 -->
        <!-- 级别过滤器，只会输出 ERROR 级别的数据 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <!-- 匹配 -->
            <OnMatch>ACCEPT</OnMatch>
            <!-- 不匹配 -->
            <OnMismatch>DENY</OnMismatch>
        </filter>
    </appender>

    <!-- 滚动输出到文件，达到一定条件时，会将日志记录到其他文件 -->
    <appender name="warn" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 本地输出路径 -->
        <File>log/warn.log</File>
        <!-- 滚动策略：根据时间滚动，当达到一定时间时，自动重新开辟一个日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--归档的日志文件的路径
                  %d{yyyy-MM-dd} 代表了当前日期
                  %i              代表了索引
                  .log.zip       代表了归档个成一个zip文件
             -->
            <fileNamePattern>log/warn归档/warn%d{yyyy-MM-dd}-%i.log.zip</fileNamePattern>
            <!-- 保留归档文件的最长天数，超过30天将被删除 -->
            <maxHistory>30</maxHistory>
            <!-- 触发策略 ：日志文件的临界值，超过该临界值后对当前日志进行分割 创建一个新的文件 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${LOG_SIZI}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!--日志的文件格式化 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_FORMAT}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- DENY：日志将立即被抛弃，不再经过其他过滤器，本appender也不进行处理 -->
        <!-- ACCEPT：日志被立即处理，不再经过其他过滤器 -->
        <!-- onMatch、onMismatch里内容要大写 -->
        <!-- 级别过滤器，只会输出 ERROR 级别的数据 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <!-- 匹配 -->
            <OnMatch>ACCEPT</OnMatch>
            <!-- 不匹配 -->
            <OnMismatch>DENY</OnMismatch>
        </filter>
    </appender>

    <!-- 滚动输出到文件，达到一定条件时，会将日志记录到其他文件 -->
    <appender name="info" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 本地输出路径 -->
        <File>log/info.log</File>
        <!-- 滚动策略：根据时间滚动，当达到一定时间时，自动重新开辟一个日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--归档的日志文件的路径
                  %d{yyyy-MM-dd} 代表了当前日期
                  %i              代表了索引
                  .log.zip       代表了归档个成一个zip文件
             -->
            <fileNamePattern>log/info归档/info%d{yyyy-MM-dd}-%i.log.zip</fileNamePattern>
            <!-- 保留归档文件的最长天数，超过30天将被删除 -->
            <maxHistory>30</maxHistory>
            <!-- 触发策略 ：日志文件的临界值，超过该临界值后对当前日志进行分割 创建一个新的文件 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${LOG_SIZI}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!--日志的文件格式化 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_FORMAT}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- DENY：日志将立即被抛弃，不再经过其他过滤器，本appender也不进行处理 -->
        <!-- ACCEPT：日志被立即处理，不再经过其他过滤器 -->
        <!-- onMatch、onMismatch里内容要大写 -->
        <!-- 级别过滤器，只会输出 ERROR 级别的数据 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <!-- 匹配 -->
            <OnMatch>ACCEPT</OnMatch>
            <!-- 不匹配 -->
            <OnMismatch>DENY</OnMismatch>
        </filter>
    </appender>

    <!-- 级别依次为【从高到低】： ERROR > WARN > INFO > DEBUG > TRACE -->
    <!--
        level="输出级别" 配置输出的级别，
        如果<appender>也配置了级别，那么就按照谁的级别高就输出谁的，
        比如：appender配了ERROR 那么root配INFO，那么会按照 appender的输出级别
        比如：root配了ERROR，appender配了INFO，那么会按照 root的输出级别
    -->
    <root level="INFO">
        <appender-ref ref="info"/>
        <appender-ref ref="error"/>
        <appender-ref ref="warn"/>
        <appender-ref ref="consoleAppender"/>
    </root>
</configuration>